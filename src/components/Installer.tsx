
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Download, Server, FileDown, ChevronDown, ChevronUp, FolderDown, Code, CheckSquare, FileText } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { useToast } from "@/components/ui/use-toast";
import JSZip from 'jszip';
import FileSaver from 'file-saver';

const Installer: React.FC = () => {
  const [isOpenFTP, setIsOpenFTP] = useState(false);
  const [isOpenCPanel, setIsOpenCPanel] = useState(false);
  const [isOpenConfig, setIsOpenConfig] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const { toast } = useToast();

  const handleDownload = async () => {
    setIsDownloading(true);
    
    try {
      // Create a new JSZip instance
      const zip = new JSZip();
      
      // Create all-in-one installer file that verifies and fixes installation
      zip.file("install.php", `<?php
/**
 * All-in-One Installer for Data Consolidation API
 * This file will:
 * 1. Check server requirements
 * 2. Create necessary directory structure
 * 3. Extract and install the application files
 * 4. Verify the installation works correctly
 * 5. Guide through setup and configuration
 */

// Disable time limit for long-running installation
set_time_limit(300);

// Start session for installer state
session_start();

// Installer version
define('INSTALLER_VERSION', '1.0.0');

// Default config values
$defaultConfig = [
    'allowed_origins' => ['*'],
    'storage_path' => __DIR__ . '/data',
    'dropbox_token' => '',
    'admin_username' => 'admin',
    'admin_password' => 'change_this_password'
];

// Installation steps
$steps = [
    'welcome' => 'Welcome',
    'requirements' => 'System Requirements',
    'filesystem' => 'File System Setup',
    'configuration' => 'Configuration',
    'installation' => 'Installation',
    'verification' => 'Verification',
    'complete' => 'Complete'
];

// Get current step
$currentStep = isset($_GET['step']) ? $_GET['step'] : 'welcome';
if (!array_key_exists($currentStep, $steps)) {
    $currentStep = 'welcome';
}

// Handle installation process actions
$message = '';
$error = '';
$success = '';

switch ($currentStep) {
    case 'requirements':
        // Check system requirements in this step
        break;
        
    case 'filesystem':
        // Handle filesystem operations
        if (isset($_POST['create_directories'])) {
            if (!file_exists('data')) {
                if (mkdir('data', 0755, true)) {
                    $success = 'Data directory created successfully';
                } else {
                    $error = 'Failed to create data directory. Please check permissions.';
                }
            } else {
                if (is_writable('data')) {
                    $success = 'Data directory already exists and is writable';
                } else {
                    $error = 'Data directory exists but is not writable. Please set proper permissions (chmod 755 data).';
                }
            }
        }
        break;
        
    case 'configuration':
        // Handle configuration setup
        if (isset($_POST['save_config'])) {
            $config = $defaultConfig;
            
            // Update with user provided values
            if (!empty($_POST['allowed_origins'])) {
                $config['allowed_origins'] = explode(',', $_POST['allowed_origins']);
            }
            
            if (!empty($_POST['storage_path'])) {
                $config['storage_path'] = $_POST['storage_path'];
            } else {
                $config['storage_path'] = __DIR__ . '/data';
            }
            
            if (!empty($_POST['dropbox_token'])) {
                $config['dropbox_token'] = $_POST['dropbox_token'];
            }
            
            if (!empty($_POST['admin_username'])) {
                $config['admin_username'] = $_POST['admin_username'];
            }
            
            if (!empty($_POST['admin_password'])) {
                $config['admin_password'] = $_POST['admin_password'];
            }
            
            // Save config to file
            $configContent = "<?php\n/**\n * Configuration file for Data Consolidation API\n * Generated by installer on " . date('Y-m-d H:i:s') . "\n */\n\n";
            $configContent .= "\$config = [\n";
            
            foreach ($config as $key => $value) {
                $configContent .= "    // " . ucfirst(str_replace('_', ' ', $key)) . "\n";
                
                if (is_array($value)) {
                    $configContent .= "    '$key' => [";
                    if ($key === 'allowed_origins') {
                        $configContent .= "'" . implode("', '", $value) . "'";
                    } else {
                        $configContent .= implode(', ', $value);
                    }
                    $configContent .= "],\n";
                } else {
                    $configContent .= "    '$key' => '$value',\n";
                }
            }
            
            $configContent .= "];\n\n";
            $configContent .= "// Validate storage directory\n";
            $configContent .= "if (!file_exists(\$config['storage_path'])) {\n";
            $configContent .= "    mkdir(\$config['storage_path'], 0755, true);\n";
            $configContent .= "}\n";
            
            if (file_put_contents('config.php', $configContent)) {
                $success = 'Configuration saved successfully';
                $_SESSION['config_saved'] = true;
            } else {
                $error = 'Failed to save configuration. Please check file permissions.';
            }
        }
        break;
        
    case 'installation':
        // Create files needed for the API
        if (isset($_POST['install_files']) || isset($_POST['install_continue'])) {
            $filesToCreate = [
                'index.php' => createIndexPHP(),
                '.htaccess' => createHtaccess(),
                'test.php' => createTestPHP(),
                'endpoints/status.php' => createStatusPHP(),
                'endpoints/data.php' => createDataPHP(),
                'endpoints/export.php' => createExportPHP(),
                'README.md' => createReadme()
            ];
            
            $allFilesCreated = true;
            
            foreach ($filesToCreate as $file => $content) {
                // Create directory if it doesn't exist
                $dir = dirname($file);
                if ($dir !== '.' && !file_exists($dir)) {
                    mkdir($dir, 0755, true);
                }
                
                if (!file_put_contents($file, $content)) {
                    $error = "Failed to create file: $file. Please check permissions.";
                    $allFilesCreated = false;
                    break;
                }
            }
            
            if ($allFilesCreated) {
                $success = 'All API files created successfully';
                $_SESSION['files_created'] = true;
            }
        }
        break;
        
    case 'verification':
        // This step will use test.php to verify the installation
        break;
        
    case 'complete':
        // Final step, cleanup installer if needed
        break;
}

// Helper function to get next step
function getNextStep($currentStep) {
    global $steps;
    $keys = array_keys($steps);
    $currentIndex = array_search($currentStep, $keys);
    if ($currentIndex !== false && $currentIndex < count($keys) - 1) {
        return $keys[$currentIndex + 1];
    }
    return $currentStep;
}

// Helper function to get previous step
function getPrevStep($currentStep) {
    global $steps;
    $keys = array_keys($steps);
    $currentIndex = array_search($currentStep, $keys);
    if ($currentIndex !== false && $currentIndex > 0) {
        return $keys[$currentIndex - 1];
    }
    return $currentStep;
}

// Helper functions to create file contents
function createIndexPHP() {
    return '<?php
/**
 * Data Consolidation API
 * Main entry point for API requests
 */

// Load configuration
require_once \'config.php\';

// Get request method and path
$method = $_SERVER[\'REQUEST_METHOD\'];
$uri = parse_url($_SERVER[\'REQUEST_URI\'], PHP_URL_PATH);
$uri = explode(\'/\', trim($uri, \'/\'));

// Set headers for API responses
header(\'Content-Type: application/json\');
header(\'Access-Control-Allow-Origin: \' . implode(\', \', $config[\'allowed_origins\']));
header(\'Access-Control-Allow-Methods: GET, POST, OPTIONS\');
header(\'Access-Control-Allow-Headers: Content-Type, X-API-Key\');

// Handle preflight OPTIONS requests
if ($method === \'OPTIONS\') {
    http_response_code(200);
    exit();
}

// Check for API key in header
$apiKey = isset($_SERVER[\'HTTP_X_API_KEY\']) ? $_SERVER[\'HTTP_X_API_KEY\'] : \'\';
if (empty($apiKey)) {
    http_response_code(401);
    echo json_encode([\'error\' => \'API key is required\']);
    exit();
}

// Basic routing
if (count($uri) > 0) {
    $endpoint = $uri[count($uri) - 1];
    
    switch ($endpoint) {
        case \'data\':
            require_once \'endpoints/data.php\';
            break;
        case \'export\':
            require_once \'endpoints/export.php\';
            break;
        case \'status\':
            require_once \'endpoints/status.php\';
            break;
        case \'test\':
            require_once \'test.php\';
            break;
        default:
            http_response_code(404);
            echo json_encode([\'error\' => \'Endpoint not found\']);
            break;
    }
} else {
    http_response_code(404);
    echo json_encode([\'error\' => \'Endpoint not found\']);
}
';
}

function createHtaccess() {
    return '# Enable rewrite engine
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php [QSA,L]

# Protect config file
<Files "config.php">
    Order Allow,Deny
    Deny from all
</Files>

# Protect data directory
<Files "data/*">
    Order Allow,Deny
    Deny from all
</Files>

# Cross-Origin headers for API
<IfModule mod_headers.c>
    Header set Access-Control-Allow-Origin "*"
    Header set Access-Control-Allow-Methods "POST, GET, OPTIONS"
    Header set Access-Control-Allow-Headers "Content-Type, X-API-Key"
    Header set Access-Control-Max-Age "3600"
</IfModule>
';
}

function createTestPHP() {
    return '<?php
/**
 * Installation Test Script
 * This file helps verify that your installation is working correctly
 */

// Check if directly accessed
$directAccess = !isset($config);
if ($directAccess) {
    // If accessed directly, load config
    require_once \'config.php\';
    header(\'Content-Type: text/html\');
    echo \'<!DOCTYPE html>
    <html>
    <head>
        <title>Data Consolidation API - Installation Test</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; line-height: 1.6; }
            h1 { color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px; }
            h2 { margin-top: 30px; color: #444; }
            .success { color: green; font-weight: bold; }
            .error { color: red; font-weight: bold; }
            .warning { color: orange; font-weight: bold; }
            .test-item { background: #f8f8f8; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 5px solid #ddd; }
            .test-item.pass { border-left-color: green; }
            .test-item.fail { border-left-color: red; }
            .test-item.warn { border-left-color: orange; }
            code { background: #eee; padding: 2px 4px; border-radius: 3px; font-family: monospace; }
            pre { background: #f1f1f1; padding: 10px; border-radius: 5px; overflow: auto; }
            .fix-instructions { background: #fffaf0; padding: 10px; border-left: 3px solid #ffc107; margin-top: 10px; }
        </style>
    </head>
    <body>
        <h1>Data Consolidation API - Installation Test</h1>
        <p>This tool checks your installation and helps identify any issues.</p>
        <div id="test-results">\';
} else {
    // If accessed through API, return JSON
    // API key already verified in index.php
}

// Initialize tests array
$tests = [];
$hasErrors = false;
$hasWarnings = false;

// Test 1: PHP Version
$phpVersion = phpversion();
$phpVersionCheck = version_compare($phpVersion, \'7.4.0\', \'>=\');
$tests[] = [
    \'name\' => \'PHP Version\',
    \'status\' => $phpVersionCheck ? \'pass\' : \'fail\',
    \'message\' => \'PHP version: \' . $phpVersion,
    \'expected\' => \'PHP 7.4.0 or higher\',
    \'fix\' => $phpVersionCheck ? \'\' : \'Contact your hosting provider to upgrade PHP to version 7.4.0 or higher.\'
];
if (!$phpVersionCheck) $hasErrors = true;

// Test 2: Required PHP Extensions
$requiredExtensions = [\'json\', \'curl\', \'mbstring\', \'fileinfo\'];
$missingExtensions = [];
foreach ($requiredExtensions as $ext) {
    if (!extension_loaded($ext)) {
        $missingExtensions[] = $ext;
    }
}
$extensions_check = empty($missingExtensions);
$tests[] = [
    \'name\' => \'PHP Extensions\',
    \'status\' => $extensions_check ? \'pass\' : \'fail\',
    \'message\' => $extensions_check ? \'All required extensions are installed.\' : \'Missing extensions: \' . implode(\', \', $missingExtensions),
    \'expected\' => \'json, curl, mbstring, fileinfo\',
    \'fix\' => $extensions_check ? \'\' : \'Enable missing PHP extensions through your hosting control panel or contact your hosting provider.\'
];
if (!$extensions_check) $hasErrors = true;

// Test 3: Data Directory Permissions
$dataPath = $config[\'storage_path\'];
$dirExists = file_exists($dataPath);
$dirWritable = $dirExists && is_writable($dataPath);

$dirStatus = \'fail\';
$dirMessage = \'\';
$dirFix = \'\';

if (!$dirExists) {
    $dirMessage = \'Data directory does not exist: \' . $dataPath;
    $dirFix = \'Create the data directory and ensure proper permissions: <code>mkdir -p \' . $dataPath . \'</code>\';
    $hasErrors = true;
} elseif (!$dirWritable) {
    $dirMessage = \'Data directory exists but is not writable: \' . $dataPath;
    $dirFix = \'Set proper permissions: <code>chmod 755 \' . $dataPath . \'</code>\';
    $hasErrors = true;
} else {
    $dirStatus = \'pass\';
    $dirMessage = \'Data directory exists and is writable: \' . $dataPath;
}

$tests[] = [
    \'name\' => \'Data Directory\',
    \'status\' => $dirStatus,
    \'message\' => $dirMessage,
    \'expected\' => \'Directory exists and is writable\',
    \'fix\' => $dirFix
];

// Test 4: Mod Rewrite Enabled
$modRewriteEnabled = function_exists(\'apache_get_modules\') ? in_array(\'mod_rewrite\', apache_get_modules()) : null;
$modRewriteStatus = $modRewriteEnabled === null ? \'warn\' : ($modRewriteEnabled ? \'pass\' : \'warn\');
$modRewriteMessage = $modRewriteEnabled === null ? 
                   \'Could not detect Apache modules. Mod rewrite status unknown.\' : 
                   ($modRewriteEnabled ? \'Mod rewrite is enabled.\' : \'Mod rewrite may not be enabled.\');
$tests[] = [
    \'name\' => \'Apache Mod Rewrite\',
    \'status\' => $modRewriteStatus,
    \'message\' => $modRewriteMessage,
    \'expected\' => \'Enabled\',
    \'fix\' => $modRewriteEnabled === false ? \'Enable mod_rewrite in your Apache configuration or contact your hosting provider. For SiteGround, this is typically enabled by default.\' : \'\'
];
if ($modRewriteStatus === \'warn\') $hasWarnings = true;

// Test 5: Config File
$configFileInaccessible = false;
$testUrl = str_replace(\'/test.php\', \'/config.php\', $_SERVER[\'PHP_SELF\']);
$testFullUrl = (isset($_SERVER[\'HTTPS\']) && $_SERVER[\'HTTPS\'] === \'on\' ? \'https\' : \'http\') . "://$_SERVER[HTTP_HOST]$testUrl";

$ch = curl_init($testFullUrl);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_NOBODY, true);
curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

$configFileInaccessible = ($httpCode == 403 || $httpCode == 404);
$tests[] = [
    \'name\' => \'Config File Protection\',
    \'status\' => $configFileInaccessible ? \'pass\' : \'fail\',
    \'message\' => $configFileInaccessible ? \'Config file is protected from direct access.\' : \'Config file may be accessible directly: HTTP code \' . $httpCode,
    \'expected\' => \'Protected (403 or 404 response)\',
    \'fix\' => $configFileInaccessible ? \'\' : \'Check .htaccess file permissions and configuration. Ensure the following rule is present and working:<br><pre>
&lt;Files "config.php"&gt;
    Order Allow,Deny
    Deny from all
&lt;/Files&gt;</pre>\'
];
if (!$configFileInaccessible) $hasErrors = true;

// Test 6: API Connectivity
$testEndpoint = str_replace(\'/test.php\', \'/status\', $_SERVER[\'PHP_SELF\']);
$testFullEndpoint = (isset($_SERVER[\'HTTPS\']) && $_SERVER[\'HTTPS\'] === \'on\' ? \'https\' : \'http\') . "://$_SERVER[HTTP_HOST]$testEndpoint";

$ch = curl_init($testFullEndpoint);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [\'X-API-Key: demo-key-factory\']);
$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

$responseData = json_decode($response, true);
$hasValidStatus = $httpCode === 200 && isset($responseData[\'status\']) && $responseData[\'status\'] === \'ok\';

$tests[] = [
    \'name\' => \'API Connectivity\',
    \'status\' => $hasValidStatus ? \'pass\' : \'fail\',
    \'message\' => $hasValidStatus ? \'API endpoints are accessible.\' : \'API endpoints may not be working correctly. HTTP code: \' . $httpCode,
    \'expected\' => \'HTTP 200 with status: ok\',
    \'fix\' => $hasValidStatus ? \'\' : \'Check your Apache configuration and .htaccess file. Ensure mod_rewrite is working correctly and the API routes are properly set up. If using subdirectories, ensure your rewrite rules account for them. Try adding this to your .htaccess file:<br><pre>RewriteBase /api/</pre>\'
];
if (!$hasValidStatus) $hasErrors = true;

// Output test results
if ($directAccess) {
    // HTML output for direct access
    $overallStatus = $hasErrors ? \'fail\' : ($hasWarnings ? \'warn\' : \'pass\');
    $overallStatusText = $hasErrors ? \'Failed\' : ($hasWarnings ? \'Passed with Warnings\' : \'Passed\');
    $overallStatusClass = $hasErrors ? \'error\' : ($hasWarnings ? \'warning\' : \'success\');
    
    echo \'<h2>Overall Status: <span class="\' . $overallStatusClass . \'">\' . $overallStatusText . \'</span></h2>\';
    
    foreach ($tests as $test) {
        echo \'<div class="test-item \' . $test[\'status\'] . \'">\';
        echo \'<strong>\' . $test[\'name\'] . \':</strong> \';
        $statusText = $test[\'status\'] === \'pass\' ? \'Pass\' : ($test[\'status\'] === \'warn\' ? \'Warning\' : \'Fail\');
        $statusClass = $test[\'status\'] === \'pass\' ? \'success\' : ($test[\'status\'] === \'warn\' ? \'warning\' : \'error\');
        echo \'<span class="\' . $statusClass . \'">\' . $statusText . \'</span><br>\';
        echo \'Result: \' . $test[\'message\'] . \'<br>\';
        echo \'Expected: \' . $test[\'expected\'];
        
        if (!empty($test[\'fix\'])) {
            echo \'<div class="fix-instructions">\';
            echo \'<strong>How to fix:</strong> \' . $test[\'fix\'];
            echo \'</div>\';
        }
        
        echo \'</div>\';
    }
    
    if ($overallStatus === \'pass\') {
        echo \'<h2>Installation Status: <span class="success">Ready to Use</span></h2>\';
        echo \'<p>Congratulations! Your Data Consolidation API installation is working correctly.</p>\';
    } else {
        echo \'<h2>Installation Status: <span class="\' . $overallStatusClass . \'">Needs Attention</span></h2>\';
        echo \'<p>Please fix the issues above to ensure proper functionality.</p>\';
    }
    
    echo \'<h2>Next Steps</h2>\';
    echo \'<p>Once all tests pass:</p>\';
    echo \'<ol>\';
    echo \'<li>Configure your API key in <code>config.php</code></li>\';
    echo \'<li>Update your allowed origins for proper CORS support</li>\';
    echo \'<li>Set up the Dropbox token if you plan to use automatic exports</li>\';
    echo \'</ol>\';
    
    echo \'<h2>Troubleshooting Common Issues</h2>\';
    echo \'<details>\';
    echo \'<summary><strong>API Connectivity Failing (404 Errors)</strong></summary>\';
    echo \'<div class="fix-instructions">\';
    echo \'<p>If you\'re getting 404 errors when testing API connectivity, try these fixes:</p>\';
    echo \'<ol>\';
    echo \'<li>Make sure the .htaccess file exists in the same directory as index.php</li>\';
    echo \'<li>If your API is in a subdirectory (e.g., /api/), add <code>RewriteBase /api/</code> to your .htaccess file</li>\';
    echo \'<li>Check if mod_rewrite is enabled on your server</li>\';
    echo \'<li>Verify that all files (index.php, endpoints/*.php, etc.) are in the correct location</li>\';
    echo \'<li>If using SiteGround, make sure you have activated the Apache mod_rewrite in cPanel → PHP & Site Software → Apache Handlers</li>\';
    echo \'</ol>\';
    echo \'</div>\';
    echo \'</details>\';
    
    echo \'</div></body></html>\';
} else {
    // JSON output for API access
    $result = [
        \'status\' => $hasErrors ? \'error\' : ($hasWarnings ? \'warning\' : \'ok\'),
        \'message\' => $hasErrors ? \'Installation has issues that need to be fixed.\' : 
                    ($hasWarnings ? \'Installation is working but has warnings.\' : \'Installation is working correctly.\'),
        \'tests\' => $tests
    ];
    
    echo json_encode($result);
}
';
}

function createStatusPHP() {
    return '<?php
/**
 * Status endpoint
 * Returns the current status of the API
 */

// Check if method is GET
if ($method !== \'GET\') {
    http_response_code(405);
    echo json_encode([\'error\' => \'Method not allowed\']);
    exit();
}

// Check write permissions on data directory
$canWrite = is_writable($config[\'storage_path\']);

// Return API status
echo json_encode([
    \'status\' => \'ok\',
    \'version\' => \'1.0.0\',
    \'timestamp\' => date(\'c\'),
    \'storage\' => [
        \'path\' => $config[\'storage_path\'],
        \'writable\' => $canWrite
    ]
]);
';
}

function createDataPHP() {
    return '<?php
/**
 * Data endpoint
 * Receives and stores data from sources
 */

// Check if method is POST
if ($method !== \'POST\') {
    http_response_code(405);
    echo json_encode([\'error\' => \'Method not allowed\']);
    exit();
}

// Get JSON body
$input = file_get_contents(\'php://input\');
$data = json_decode($input, true);

// Validate data
if (empty($data) || !is_array($data)) {
    http_response_code(400);
    echo json_encode([\'error\' => \'Invalid data format\']);
    exit();
}

// Required fields validation
$requiredFields = [\'sensorId\'];
foreach ($requiredFields as $field) {
    if (!isset($data[$field])) {
        http_response_code(400);
        echo json_encode([\'error\' => "Missing required field: {$field}"]);
        exit();
    }
}

// Add timestamp if not present
if (!isset($data[\'timestamp\'])) {
    $data[\'timestamp\'] = date(\'c\');
}

// Add unique ID if not present
if (!isset($data[\'id\'])) {
    $data[\'id\'] = uniqid(\'entry-\');
}

// Store the data
$filename = $config[\'storage_path\'] . \'/\' . date(\'Y-m-d-H-i-s\') . \'-\' . uniqid() . \'.json\';
$success = file_put_contents($filename, json_encode($data, JSON_PRETTY_PRINT));

if ($success === false) {
    http_response_code(500);
    echo json_encode([\'error\' => \'Failed to save data\']);
    exit();
}

// Return success response
echo json_encode([
    \'success\' => true,
    \'message\' => \'Data received successfully\',
    \'id\' => $data[\'id\']
]);
';
}

function createExportPHP() {
    return '<?php
/**
 * Export endpoint
 * Exports collected data to CSV format
 */

// Check if method is GET
if ($method !== \'GET\') {
    http_response_code(405);
    echo json_encode([\'error\' => \'Method not allowed\']);
    exit();
}

// Get all JSON files from data directory
$files = glob($config[\'storage_path\'] . \'/*.json\');
if (empty($files)) {
    echo json_encode([\'message\' => \'No data to export\']);
    exit();
}

// Collect all data
$allData = [];
foreach ($files as $file) {
    $content = file_get_contents($file);
    $data = json_decode($content, true);
    if ($data) {
        $allData[] = $data;
    }
}

// Get all possible fields
$allFields = [];
foreach ($allData as $item) {
    foreach (array_keys($item) as $key) {
        if (!in_array($key, $allFields)) {
            $allFields[] = $key;
        }
    }
}

// Generate CSV content
$csvContent = implode(",", $allFields) . "\\n";
foreach ($allData as $item) {
    $line = [];
    foreach ($allFields as $field) {
        $value = isset($item[$field]) ? $item[$field] : \'\';
        // Escape quotes in CSV
        if (is_string($value)) {
            $value = \'"\' . str_replace(\'"\', \'""\', $value) . \'"\';
        }
        $line[] = $value;
    }
    $csvContent .= implode(",", $line) . "\\n";
}

// Dropbox export option
$dropboxExport = false;
if (!empty($config[\'dropbox_token\'])) {
    $dropboxExport = true;
    // In a real implementation, you would use Dropbox API to upload the CSV
    // This is a placeholder for demonstration
}

// Return CSV directly to the client
header(\'Content-Type: text/csv\');
header(\'Content-Disposition: attachment; filename="data-export-\' . date(\'Y-m-d\') . \'.csv"\');
echo $csvContent;
';
}

function createReadme() {
    return '# Data Consolidation API

A simple PHP API for collecting and consolidating data from various sources.

## Installation

1. Upload all files to your web server
2. Set appropriate permissions (755 for directories, 644 for files)
3. Configure your settings in config.php
4. Test the installation by visiting https://your-domain.com/path/to/api/test.php

## API Endpoints

- **/data** - POST endpoint for receiving data
- **/export** - GET endpoint for exporting data to CSV
- **/status** - GET endpoint for checking API status
- **/test.php** - Test script to verify your installation 

## Configuration

Edit the config.php file to set:
- Allowed origins for CORS
- Storage path for data
- Dropbox token for backups
- Admin credentials

## Security

- Always use HTTPS in production
- Change the default admin password
- Consider implementing additional authentication if needed

## Support

For any issues or questions, please contact support.
';
}

// HTML Layout
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Consolidation API Installer</title>
    <style>
        /* Installer styles */
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background: #f9f9f9;
        }
        
        h1, h2, h3 {
            color: #2c3e50;
        }
        
        .installer-header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        
        .steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            position: relative;
        }
        
        .steps::before {
            content: '';
            position: absolute;
            top: 15px;
            left: 0;
            right: 0;
            height: 2px;
            background: #ddd;
            z-index: 1;
        }
        
        .step {
            position: relative;
            z-index: 2;
            background: #f9f9f9;
            padding: 0 10px;
        }
        
        .step-number {
            display: inline-block;
            width: 30px;
            height: 30px;
            line-height: 30px;
            text-align: center;
            border-radius: 50%;
            background: #ddd;
            color: #555;
            margin-right: 10px;
        }
        
        .step.active .step-number {
            background: #3498db;
            color: white;
        }
        
        .step.completed .step-number {
            background: #2ecc71;
            color: white;
        }
        
        .installer-content {
            background: white;
            padding: 30px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        input[type="text"], 
        input[type="password"],
        textarea,
        select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        .message {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 4px;
        }
        
        .message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .message.info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        
        .button {
            display: inline-block;
            padding: 10px 20px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            text-decoration: none;
        }
        
        .button:hover {
            background: #2980b9;
        }
        
        .button.secondary {
            background: #95a5a6;
        }
        
        .button.secondary:hover {
            background: #7f8c8d;
        }
        
        .actions {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
        }
        
        pre {
            background: #f8f8f8;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
        
        code {
            background: #f0f0f0;
            padding: 2px 4px;
            border-radius: 3px;
        }
        
        .requirements-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        .requirements-table th, .requirements-table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
        }
        
        .requirements-table th {
            background: #f5f5f5;
        }
        
        .status-pass {
            color: #2ecc71;
        }
        
        .status-fail {
            color: #e74c3c;
        }
        
        .status-warn {
            color: #f39c12;
        }
    </style>
</head>
<body>
    <div class="installer-header">
        <h1>Data Consolidation API Installer</h1>
        <p>This installer will guide you through setting up your API on your server</p>
    </div>
    
    <div class="steps">
        <?php foreach ($steps as $stepKey => $stepName): ?>
            <?php 
                $stepClass = '';
                if ($stepKey === $currentStep) {
                    $stepClass = 'active';
                } elseif (array_search($stepKey, array_keys($steps)) < array_search($currentStep, array_keys($steps))) {
                    $stepClass = 'completed';
                }
            ?>
            <div class="step <?php echo $stepClass; ?>">
                <span class="step-number"><?php echo array_search($stepKey, array_keys($steps)) + 1; ?></span>
                <span class="step-name"><?php echo $stepName; ?></span>
            </div>
        <?php endforeach; ?>
    </div>
    
    <div class="installer-content">
        <?php if (!empty($error)): ?>
            <div class="message error"><?php echo $error; ?></div>
        <?php endif; ?>
        
        <?php if (!empty($success)): ?>
            <div class="message success"><?php echo $success; ?></div>
        <?php endif; ?>
        
        <?php if (!empty($message)): ?>
            <div class="message info"><?php echo $message; ?></div>
        <?php endif; ?>
        
        <?php switch ($currentStep): ?>
            <?php case 'welcome': ?>
                <h2>Welcome to the Data Consolidation API Installer</h2>
                <p>This installer will guide you through the process of setting up the Data Consolidation API on your server. The following steps will be performed:</p>
                
                <ol>
                    <li>Check your system requirements</li>
                    <li>Set up the filesystem</li>
                    <li>Configure the API</li>
                    <li>Install the API files</li>
                    <li>Verify the installation</li>
                </ol>
                
                <p>Before you begin, please make sure you have:</p>
                <ul>
                    <li>PHP 7.4 or higher installed on your server</li>
                    <li>Apache with mod_rewrite enabled</li>
                    <li>Write permissions on the current directory</li>
                </ul>
                
                <div class="actions">
                    <div>&nbsp;</div>
                    <a href="?step=<?php echo getNextStep($currentStep); ?>" class="button">Start Installation</a>
                </div>
            <?php break; ?>
            
            <?php case 'requirements': ?>
                <h2>System Requirements</h2>
                <p>Checking if your server meets the requirements for running the Data Consolidation API.</p>
                
                <table class="requirements-table">
                    <tr>
                        <th>Requirement</th>
                        <th>Current</th>
                        <th>Required</th>
                        <th>Status</th>
                    </tr>
                    <tr>
                        <td>PHP Version</td>
                        <td><?php echo phpversion(); ?></td>
                        <td>7.4.0 or higher</td>
                        <td>
                            <?php if (version_compare(phpversion(), '7.4.0', '>=')): ?>
                                <span class="status-pass">✓ Pass</span>
                            <?php else: ?>
                                <span class="status-fail">✗ Fail</span>
                            <?php endif; ?>
                        </td>
                    </tr>
                    <tr>
                        <td>JSON Extension</td>
                        <td><?php echo extension_loaded('json') ? 'Enabled' : 'Disabled'; ?></td>
                        <td>Enabled</td>
                        <td>
                            <?php if (extension_loaded('json')): ?>
                                <span class="status-pass">✓ Pass</span>
                            <?php else: ?>
                                <span class="status-fail">✗ Fail</span>
                            <?php endif; ?>
                        </td>
                    </tr>
                    <tr>
                        <td>cURL Extension</td>
                        <td><?php echo extension_loaded('curl') ? 'Enabled' : 'Disabled'; ?></td>
                        <td>Enabled</td>
                        <td>
                            <?php if (extension_loaded('curl')): ?>
                                <span class="status-pass">✓ Pass</span>
                            <?php else: ?>
                                <span class="status-fail">✗ Fail</span>
                            <?php endif; ?>
                        </td>
                    </tr>
                    <tr>
                        <td>Directory Permissions</td>
                        <td><?php echo is_writable('.') ? 'Writable' : 'Not Writable'; ?></td>
                        <td>Writable</td>
                        <td>
                            <?php if (is_writable('.')): ?>
                                <span class="status-pass">✓ Pass</span>
                            <?php else: ?>
                                <span class="status-fail">✗ Fail</span>
                            <?php endif; ?>
                        </td>
                    </tr>
                    <tr>
                        <td>Mod Rewrite</td>
                        <td>
                            <?php 
                                $modRewriteEnabled = function_exists('apache_get_modules') ? 
                                    (in_array('mod_rewrite', apache_get_modules()) ? 'Enabled' : 'Disabled') : 
                                    'Unknown';
                                echo $modRewriteEnabled;
                            ?>
                        </td>
                        <td>Enabled</td>
                        <td>
                            <?php if ($modRewriteEnabled === 'Enabled'): ?>
                                <span class="status-pass">✓ Pass</span>
                            <?php elseif ($modRewriteEnabled === 'Unknown'): ?>
                                <span class="status-warn">? Unknown</span>
                            <?php else: ?>
                                <span class="status-warn">! Warning</span>
                            <?php endif; ?>
                        </td>
                    </tr>
                </table>
                
                <?php
                    $phpVersion = version_compare(phpversion(), '7.4.0', '>=');
                    $jsonExt = extension_loaded('json');
                    $curlExt = extension_loaded('curl');
                    $dirWritable = is_writable('.');
                    $canContinue = $phpVersion && $jsonExt && $curlExt && $dirWritable;
                ?>
                
                <?php if (!$canContinue): ?>
                    <div class="message error">
                        <strong>Your server does not meet all requirements!</strong>
                        <p>Please fix the issues above before continuing with the installation.</p>
                    </div>
                <?php endif; ?>
                
                <div class="actions">
                    <a href="?step=<?php echo getPrevStep($currentStep); ?>" class="button secondary">Back</a>
                    <a href="?step=<?php echo getNextStep($currentStep); ?>" class="button" <?php echo !$canContinue ? 'style="opacity: 0.5; pointer-events: none;"' : ''; ?>>Continue</a>
                </div>
            <?php break; ?>
            
            <?php case 'filesystem': ?>
                <h2>File System Setup</h2>
                <p>Setting up the required directories for the Data Consolidation API.</p>
                
                <form method="post" action="?step=<?php echo $currentStep; ?>">
                    <div class="message info">
                        <p>The installer will now create the necessary directory structure for the API:</p>
                        <ul>
                            <li><code>data/</code> - Directory for storing data files</li>
                            <li><code>endpoints/</code> - Directory for API endpoint files</li>
                        </ul>
                    </div>
                    
                    <div class="form-group">
                        <label for="custom_path">Custom Path for Data Directory (optional):</label>
                        <input type="text" id="custom_path" name="custom_path" placeholder="Leave empty for default (./data)">
                    </div>
                    
                    <div class="actions">
                        <button type="submit" name="create_directories" class="button">Create Directories</button>
                    </div>
                </form>
                
                <div class="actions">
                    <a href="?step=<?php echo getPrevStep($currentStep); ?>" class="button secondary">Back</a>
                    <a href="?step=<?php echo getNextStep($currentStep); ?>" class="button">Continue</a>
                </div>
            <?php break; ?>
            
            <?php case 'configuration': ?>
                <h2>Configuration</h2>
                <p>Configure your Data Consolidation API settings.</p>
                
                <form method="post" action="?step=<?php echo $currentStep; ?>">
                    <div class="form-group">
                        <label for="allowed_origins">Allowed Origins (comma-separated):</label>
                        <input type="text" id="allowed_origins" name="allowed_origins" placeholder="*, https://example.com" value="*">
                        <small>Use * for development, specify actual domains for production</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="storage_path">Storage Path:</label>
                        <input type="text" id="storage_path" name="storage_path" placeholder="Absolute path or relative to API directory" value="<?php echo __DIR__ . '/data'; ?>">
                    </div>
                    
                    <div class="form-group">
                        <label for="dropbox_token">Dropbox Token (optional):</label>
                        <input type="text" id="dropbox_token" name="dropbox_token" placeholder="Your Dropbox API token">
                    </div>
                    
                    <div class="form-group">
                        <label for="admin_username">Admin Username:</label>
                        <input type="text" id="admin_username" name="admin_username" value="admin">
                    </div>
                    
                    <div class="form-group">
                        <label for="admin_password">Admin Password:</label>
                        <input type="password" id="admin_password" name="admin_password" value="change_this_password">
                    </div>
                    
                    <div class="actions">
                        <button type="submit" name="save_config" class="button">Save Configuration</button>
                    </div>
                </form>
                
                <div class="actions">
                    <a href="?step=<?php echo getPrevStep($currentStep); ?>" class="button secondary">Back</a>
                    <a href="?step=<?php echo getNextStep($currentStep); ?>" class="button" <?php echo !isset($_SESSION['config_saved']) ? 'style="opacity: 0.5; pointer-events: none;"' : ''; ?>>Continue</a>
                </div>
            <?php break; ?>
            
            <?php case 'installation': ?>
                <h2>Installation</h2>
                <p>Installing the Data Consolidation API files.</p>
                
                <?php if (!isset($_SESSION['files_created'])): ?>
                    <div class="message info">
                        <p>The installer will now create the following files:</p>
                        <ul>
                            <li><code>index.php</code> - Main entry point for the API</li>
                            <li><code>.htaccess</code> - Apache configuration file</li>
                            <li><code>test.php</code> - Installation test script</li>
                            <li><code>endpoints/status.php</code> - Status endpoint</li>
                            <li><code>endpoints/data.php</code> - Data endpoint</li>
                            <li><code>endpoints/export.php</code> - Export endpoint</li>
                            <li><code>README.md</code> - Documentation</li>
                        </ul>
                    </div>
                    
                    <form method="post" action="?step=<?php echo $currentStep; ?>">
                        <div class="actions">
                            <button type="submit" name="install_files" class="button">Install Files</button>
                        </div>
                    </form>
                <?php else: ?>
                    <div class="message success">
                        <p>All API files have been created successfully!</p>
                    </div>
                    
                    <form method="post" action="?step=<?php echo $currentStep; ?>">
                        <div class="actions">
                            <button type="submit" name="install_continue" class="button">Continue</button>
                        </div>
                    </form>
                <?php endif; ?>
                
                <div class="actions">
                    <a href="?step=<?php echo getPrevStep($currentStep); ?>" class="button secondary">Back</a>
                    <a href="?step=<?php echo getNextStep($currentStep); ?>" class="button" <?php echo !isset($_SESSION['files_created']) ? 'style="opacity: 0.5; pointer-events: none;"' : ''; ?>>Continue</a>
                </div>
            <?php break; ?>
            
            <?php case 'verification': ?>
                <h2>Verification</h2>
                <p>Verifying that your installation is working correctly.</p>
                
                <div class="message info">
                    <p>The installer has created a test script (<code>test.php</code>) that can be used to verify your installation.</p>
                    <p>Click the button below to run the test script and check if everything is working correctly.</p>
                </div>
                
                <div class="actions">
                    <a href="test.php" target="_blank" class="button">Run Test Script</a>
                </div>
                
                <div class="message info" style="margin-top: 20px;">
                    <h3>Important: Fix Common Issues</h3>
                    <p>If you see API Connectivity errors in the test script:</p>
                    <ol>
                        <li>Make sure all files are in the correct directory structure</li>
                        <li>Verify that the .htaccess file was created correctly</li>
                        <li>Add this line to your .htaccess file if you're in a subdirectory (like /api/):<br>
                            <code>RewriteBase /api/</code>
                        </li>
                        <li>Make sure mod_rewrite is enabled on your server</li>
                    </ol>
                </div>
                
                <div class="actions">
                    <a href="?step=<?php echo getPrevStep($currentStep); ?>" class="button secondary">Back</a>
                    <a href="?step=<?php echo getNextStep($currentStep); ?>" class="button">Continue</a>
                </div>
            <?php break; ?>
            
            <?php case 'complete': ?>
                <h2>Installation Complete</h2>
                <div class="message success">
                    <p>Congratulations! The Data Consolidation API has been successfully installed.</p>
                </div>
                
                <h3>Next Steps</h3>
                <ol>
                    <li>Run the <a href="test.php" target="_blank">test script</a> to verify that everything is working correctly</li>
                    <li>If you encounter any issues, check the troubleshooting guide in the test script</li>
                    <li>Configure your API key in the main application</li>
                    <li>Start sending data to the API endpoint</li>
                </ol>
                
                <h3>API Endpoints</h3>
                <ul>
                    <li><code>/data</code> - POST endpoint for receiving data</li>
                    <li><code>/export</code> - GET endpoint for exporting data to CSV</li>
                    <li><code>/status</code> - GET endpoint for checking API status</li>
                    <li><code>/test.php</code> - Test script for verifying your installation</li>
                </ul>
                
                <div class="message info">
                    <p>For security reasons, you may want to delete this installer file once you've confirmed everything is working correctly.</p>
                </div>
                
                <div class="actions">
                    <a href="?step=verification" class="button secondary">Back</a>
                    <a href="test.php" target="_blank" class="button">Run Tests</a>
                </div>
            <?php break; ?>
        <?php endswitch; ?>
    </div>
</body>
</html>
`);

      // Create root directory structure and all other files for the full API package
      const apiDir = zip.folder("api-files");
      const dataDir = apiDir.folder("data");
      const endpointsDir = apiDir.folder("endpoints");
      
      // Add all the same files that were included in the installer output
      apiDir.file("index.php", createIndexPHP());
      apiDir.file(".htaccess", createHtaccess());
      apiDir.file("test.php", createTestPHP());
      apiDir.file("config.php", `<?php
/**
 * Configuration file for Data Consolidation API
 * Edit this file to configure your API settings
 */

$config = [
    // Allowed origins for CORS
    'allowed_origins' => ['*'], // Replace with your frontend domain in production
    
    // Path to data storage directory (absolute path)
    'storage_path' => __DIR__ . '/data',
    
    // Dropbox integration settings
    'dropbox_token' => 'YOUR_DROPBOX_TOKEN',
    
    // Authentication credentials for admin access
    'admin_username' => 'admin',
    'admin_password' => 'change_this_password'
];

// Validate storage directory
if (!file_exists($config['storage_path'])) {
    mkdir($config['storage_path'], 0755, true);
}
`);

      // Add endpoint files
      endpointsDir.file("status.php", createStatusPHP());
      endpointsDir.file("data.php", createDataPHP());
      endpointsDir.file("export.php", createExportPHP());
      
      // Add README
      apiDir.file("README.md", createReadme());
      
      // Create sample data file
      dataDir.file(".gitkeep", "");
      
      // Generate the ZIP file
      const zipContent = await zip.generateAsync({ type: "blob" });
      
      // Save the ZIP file using FileSaver
      FileSaver.saveAs(zipContent, "data-consolidation-api.zip");
      
      // Show success toast
      toast({
        title: "Download started",
        description: "Your installation package is downloading now. Extract the ZIP file to use it.",
      });
    } catch (error) {
      console.error("Error creating ZIP package:", error);
      toast({
        title: "Download failed",
        description: "There was an error creating the installation package.",
        variant: "destructive"
      });
    } finally {
      setIsDownloading(false);
    }
  };

  return (
    <Card className="w-full shadow-sm hover:shadow-md transition-all duration-300">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-xl font-medium">
          <Server className="h-5 w-5 text-primary" />
          SiteGround Installation Guide
        </CardTitle>
        <CardDescription>
          How to install this application on your SiteGround hosting
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          <div className="p-4 bg-primary/5 rounded-md">
            <h3 className="text-sm font-medium mb-2">Installation Overview</h3>
            <p className="text-sm text-muted-foreground mb-4">
              This guide will help you install the Data Consolidation API on your SiteGround hosting. Follow these steps to get your server up and running.
            </p>
            
            <Button 
              className="gap-2 mb-4" 
              onClick={handleDownload} 
              disabled={isDownloading}
            >
              {isDownloading ? (
                <>
                  <div className="h-4 w-4 border-2 border-t-transparent border-white rounded-full animate-spin" />
                  Creating Package...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4" />
                  Download Installation Package
                </>
              )}
            </Button>
            
            <p className="text-sm font-medium mb-2 text-primary">What's Included in the Package:</p>
            <ol className="list-disc list-inside space-y-1 text-sm">
              <li><strong>install.php</strong> - All-in-one installer script</li>
              <li><strong>Complete API Files</strong> - Ready to use on your server</li>
              <li><strong>Test Script</strong> - Verify your installation and troubleshoot issues</li>
              <li><strong>Documentation</strong> - README and usage instructions</li>
            </ol>
            
            <ol className="list-decimal list-inside space-y-3 text-sm mt-4">
              <li className="font-medium">Log in to your SiteGround account</li>
              
              <li>
                <Collapsible open={isOpenCPanel} onOpenChange={setIsOpenCPanel} className="space-y-2">
                  <CollapsibleTrigger className="font-medium flex items-center">
                    Access cPanel
                    {isOpenCPanel ? <ChevronUp className="h-4 w-4 ml-2" /> : <ChevronDown className="h-4 w-4 ml-2" />}
                  </CollapsibleTrigger>
                  <CollapsibleContent className="pl-5 space-y-2 text-muted-foreground">
                    <p>Go to your SiteGround User Area and select your hosting account.</p>
                    <p>Click on "Websites" then "Site Tools" or "cPanel" depending on your hosting plan.</p>
                  </CollapsibleContent>
                </Collapsible>
              </li>
              
              <li>
                <Collapsible open={isOpenFTP} onOpenChange={setIsOpenFTP} className="space-y-2">
                  <CollapsibleTrigger className="font-medium flex items-center">
                    Upload files using File Manager or FTP
                    {isOpenFTP ? <ChevronUp className="h-4 w-4 ml-2" /> : <ChevronDown className="h-4 w-4 ml-2" />}
                  </CollapsibleTrigger>
                  <CollapsibleContent className="pl-5 space-y-2 text-muted-foreground">
                    <p>Option 1: Using File Manager in cPanel</p>
                    <ul className="list-disc list-inside ml-3">
                      <li>Open File Manager</li>
                      <li>Navigate to your website's document root (usually public_html)</li>
                      <li>Create a new folder named "api" (or use your preferred name)</li>
                      <li>Upload the downloaded ZIP file to this folder</li>
                      <li>Extract the ZIP file in the "api" folder</li>
                      <li><strong>Important:</strong> Make sure all files are directly in the "api" folder, not in a subfolder</li>
                    </ul>
                    
                    <p className="mt-2">Option 2: Using FTP</p>
                    <ul className="list-disc list-inside ml-3">
                      <li>Connect to your server using an FTP client (like FileZilla)</li>
                      <li>Navigate to your website's document root</li>
                      <li>Create a new folder named "api" (or use your preferred name)</li>
                      <li>Extract the ZIP file on your computer</li>
                      <li>Upload all extracted files directly to the "api" folder</li>
                    </ul>
                  </CollapsibleContent>
                </Collapsible>
              </li>
              
              <li className="font-medium">Run the installer script</li>
              <div className="pl-5 text-muted-foreground">
                <p>After uploading all files:</p>
                <ol className="list-disc list-inside ml-3">
                  <li>Visit <code>https://your-domain.com/api/install.php</code> in your browser</li>
                  <li>Follow the step-by-step installation wizard</li>
                  <li>The installer will check requirements, create necessary files, and verify everything works</li>
                  <li>At the end, run the test script to make sure the API is working correctly</li>
                </ol>
              </div>
              
              <li className="font-medium">Fix any issues identified by the test script</li>
              <div className="pl-5 text-muted-foreground">
                <p>If the test script shows any errors:</p>
                <ul className="list-disc list-inside ml-3">
                  <li>For API Connectivity errors (404), add <code>RewriteBase /api/</code> to your .htaccess file</li>
                  <li>Set proper file permissions: <code>chmod 755</code> for directories and <code>chmod 644</code> for files</li>
                  <li>Make sure all files are in the correct location</li>
                </ul>
              </div>
              
              <li className="font-medium">Configure your application to use the API</li>
              <div className="pl-5 text-muted-foreground">
                <p>Once the API is working:</p>
                <ul className="list-disc list-inside ml-3">
                  <li>Set your API key in the main application</li>
                  <li>Update allowed origins in config.php for proper CORS support</li>
                  <li>Set up the Dropbox token if you plan to use automatic exports</li>
                </ul>
              </div>
            </ol>
          </div>
          
          <Separator />
          
          <div>
            <h3 className="text-sm font-medium mb-3">Troubleshooting Common Issues</h3>
            
            <Tabs defaultValue="connectivity" className="w-full">
              <TabsList className="grid grid-cols-3 mb-4">
                <TabsTrigger value="connectivity">API Connectivity</TabsTrigger>
                <TabsTrigger value="permissions">File Permissions</TabsTrigger>
                <TabsTrigger value="htaccess">.htaccess Issues</TabsTrigger>
              </TabsList>
              
              <TabsContent value="connectivity" className="space-y-3">
                <p className="text-sm text-muted-foreground">
                  If you're seeing API Connectivity errors (404) in the test script:
                </p>
                <div className="space-y-2">
                  <div className="p-2 bg-secondary/50 rounded-md">
                    <p className="text-xs"><strong>Issue:</strong> The test script reports "API endpoints may not be working correctly. HTTP code: 404"</p>
                    <p className="text-xs mt-1"><strong>Solution:</strong> Add the following line to your .htaccess file:</p>
                    <pre className="text-xs bg-secondary p-2 mt-1 rounded">RewriteBase /api/</pre>
                    <p className="text-xs mt-1">Replace '/api/' with the actual subdirectory path if different.</p>
                  </div>
                  
                  <div className="p-2 bg-secondary/50 rounded-md">
                    <p className="text-xs"><strong>Issue:</strong> Files are in the wrong location</p>
                    <p className="text-xs mt-1"><strong>Solution:</strong> Make sure all files are directly in the api directory:</p>
                    <pre className="text-xs bg-secondary p-2 mt-1 rounded">
public_html/
└── api/
    ├── index.php
    ├── config.php
    ├── .htaccess
    ├── test.php
    ├── install.php
    ├── endpoints/
    │   ├── data.php
    │   ├── export.php
    │   └── status.php
    └── data/
    </pre>
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="permissions" className="space-y-3">
                <p className="text-sm text-muted-foreground">
                  File permission issues are common on web servers:
                </p>
                <div className="space-y-2">
                  <div className="p-2 bg-secondary/50 rounded-md">
                    <p className="text-xs"><strong>Issue:</strong> Data directory is not writable</p>
                    <p className="text-xs mt-1"><strong>Solution:</strong> Set the correct permissions:</p>
                    <pre className="text-xs bg-secondary p-2 mt-1 rounded">chmod 755 data</pre>
                  </div>
                  
                  <div className="p-2 bg-secondary/50 rounded-md">
                    <p className="text-xs"><strong>Issue:</strong> PHP files have incorrect permissions</p>
                    <p className="text-xs mt-1"><strong>Solution:</strong> Set the correct permissions:</p>
                    <pre className="text-xs bg-secondary p-2 mt-1 rounded">chmod 644 *.php
chmod 644 endpoints/*.php</pre>
                  </div>
                  
                  <div className="p-2 bg-secondary/50 rounded-md">
                    <p className="text-xs"><strong>Issue:</strong> .htaccess file not working</p>
                    <p className="text-xs mt-1"><strong>Solution:</strong> Make sure it has the right permissions:</p>
                    <pre className="text-xs bg-secondary p-2 mt-1 rounded">chmod 644 .htaccess</pre>
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="htaccess" className="space-y-3">
                <p className="text-sm text-muted-foreground">
                  .htaccess problems are a common source of API connectivity issues:
                </p>
                <div className="space-y-2">
                  <div className="p-2 bg-secondary/50 rounded-md">
                    <p className="text-xs"><strong>Issue:</strong> Rewrite rules not working correctly</p>
                    <p className="text-xs mt-1"><strong>Solution:</strong> Update your .htaccess file:</p>
                    <pre className="text-xs bg-secondary p-2 mt-1 rounded"># Enable rewrite engine
RewriteEngine On

# Set the RewriteBase to your subdirectory
RewriteBase /api/

# Don't rewrite files or directories
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d

# Rewrite everything else to index.php
RewriteRule ^(.*)$ index.php [QSA,L]</pre>
                  </div>
                  
                  <div className="p-2 bg-secondary/50 rounded-md">
                    <p className="text-xs"><strong>Issue:</strong> mod_rewrite not enabled</p>
                    <p className="text-xs mt-1"><strong>Solution:</strong> Enable mod_rewrite in cPanel:</p>
                    <ul className="list-disc list-inside text-xs ml-2 mt-1">
                      <li>Go to cPanel → PHP & Site Software → Apache Handlers</li>
                      <li>Make sure mod_rewrite is enabled</li>
                      <li>If you can't enable it yourself, contact your hosting provider</li>
                    </ul>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex flex-col items-start gap-4">
        <div className="p-3 bg-primary/5 rounded-md w-full">
          <h3 className="text-sm font-medium mb-2 flex items-center gap-2">
            <Code className="h-4 w-4" />
            Server Requirements
          </h3>
          <ul className="list-disc list-inside text-xs text-muted-foreground space-y-1">
            <li>PHP 7.4 or higher</li>
            <li>JSON extension enabled</li>
            <li>cURL extension enabled</li>
            <li>mod_rewrite enabled (for clean URLs)</li>
            <li>Write permissions on data directory</li>
          </ul>
        </div>
        
        <Button variant="outline" className="gap-2 w-full" onClick={() => window.open('https://www.siteground.com/tutorials/php/', '_blank')}>
          <FileText className="h-4 w-4" />
          SiteGround PHP Documentation
        </Button>
      </CardFooter>
    </Card>
  );
};

export default Installer;
